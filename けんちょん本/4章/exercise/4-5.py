N = int(input())
digit = len(str(N))

counter = 0

# N : 入力
# cur : 現在の値
# use : 3, 5, 7 のどれを使用したか
# counter : 答え
def func(N, cur, use):
    if cur > N:
        return 
    if use == 7: # 7 = 0b111
        counter += 1
    
    # 7を付け足す
    func(N, cur*10+7, (use | 1)) # 1 = 0b001

    # 5を付け足す
    func(N, cur*10+5, (use | 2)) # 2 = 0b010

    # 3を付け足す
    func(N, cur*10+3, (use | 4)) # 4 = 0b100

# cur=0からスタート
func(N, 0, 0)
print(counter)

# 解説
"""
各桁の値が7, 5, 3のいずれかであるから、3,5,7を1つずつ以上使ってできる組み合わせの数( counter )を求めれば良い
再帰関数を用いることでN以下の753数を列挙する

現在の値をcurに格納しておき、cur > Nとなる場合は再帰呼び出しを行わず終了する (returnの部分)
3,5,7のどれを使用したかはuseに保存する。例えば use = 0b011の場合は curには5,7が含まれていることになる
bin()を用いて2進数変換をした場合、文字列になってしまうので論理和を求める演算子 | が使えない
よって、
7 = 0b111
4 = 0b100
2 = 0b010
1 = 0b001
であるから、10進数で実装する
関数が呼び出されたらまず cur > N となっているか、 use = 0b111 となっているかを調べ、
cur > N となっている場合は関数を終了、 use = 0b111(=7)となっている場合は問題の条件を満たしているのでcounter += 1とし、再帰呼び出しを行う

再帰呼び出しを行う場合、現在のcurの後ろに3,5,7を付け加えた数を引数として渡す
その際、useは3を付け足した場合はuseと0b100の論理和、つまりuse | 4 として呼び出した関数に渡す
同じように5を付け足した場合はuseと0b010の論理和、7を付け足した場合はuseと0b001の論理和を渡す

"""